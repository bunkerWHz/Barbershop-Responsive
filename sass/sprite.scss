// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$facebook-icon-big-name: 'facebook-icon-big';
$facebook-icon-big-x: 244px;
$facebook-icon-big-y: 0px;
$facebook-icon-big-offset-x: -244px;
$facebook-icon-big-offset-y: 0px;
$facebook-icon-big-width: 18px;
$facebook-icon-big-height: 39px;
$facebook-icon-big-total-width: 262px;
$facebook-icon-big-total-height: 219px;
$facebook-icon-big-image: '../img/icons/sprite.png';
$facebook-icon-big: (244px, 0px, -244px, 0px, 18px, 39px, 262px, 219px, '../img/icons/sprite.png', 'facebook-icon-big', );
$insta-icon-big-name: 'insta-icon-big';
$insta-icon-big-x: 0px;
$insta-icon-big-y: 183px;
$insta-icon-big-offset-x: 0px;
$insta-icon-big-offset-y: -183px;
$insta-icon-big-width: 36px;
$insta-icon-big-height: 36px;
$insta-icon-big-total-width: 262px;
$insta-icon-big-total-height: 219px;
$insta-icon-big-image: '../img/icons/sprite.png';
$insta-icon-big: (0px, 183px, 0px, -183px, 36px, 36px, 262px, 219px, '../img/icons/sprite.png', 'insta-icon-big', );
$login-name: 'login';
$login-x: 244px;
$login-y: 39px;
$login-offset-x: -244px;
$login-offset-y: -39px;
$login-width: 16px;
$login-height: 16px;
$login-total-width: 262px;
$login-total-height: 219px;
$login-image: '../img/icons/sprite.png';
$login: (244px, 39px, -244px, -39px, 16px, 16px, 262px, 219px, '../img/icons/sprite.png', 'login', );
$sprite-name: 'sprite';
$sprite-x: 0px;
$sprite-y: 0px;
$sprite-offset-x: 0px;
$sprite-offset-y: 0px;
$sprite-width: 244px;
$sprite-height: 183px;
$sprite-total-width: 262px;
$sprite-total-height: 219px;
$sprite-image: '../img/icons/sprite.png';
$sprite: (0px, 0px, 0px, 0px, 244px, 183px, 262px, 219px, '../img/icons/sprite.png', 'sprite', );
$vk-icon-big-name: 'vk-icon-big';
$vk-icon-big-x: 36px;
$vk-icon-big-y: 183px;
$vk-icon-big-offset-x: -36px;
$vk-icon-big-offset-y: -183px;
$vk-icon-big-width: 23px;
$vk-icon-big-height: 26px;
$vk-icon-big-total-width: 262px;
$vk-icon-big-total-height: 219px;
$vk-icon-big-image: '../img/icons/sprite.png';
$vk-icon-big: (36px, 183px, -36px, -183px, 23px, 26px, 262px, 219px, '../img/icons/sprite.png', 'vk-icon-big', );
$spritesheet-width: 262px;
$spritesheet-height: 219px;
$spritesheet-image: '../img/icons/sprite.png';
$spritesheet-sprites: ($facebook-icon-big, $insta-icon-big, $login, $sprite, $vk-icon-big, );
$spritesheet: (262px, 219px, '../img/icons/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
